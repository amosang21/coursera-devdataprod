training <- Wage[inTrain,]
test <- Wage[-inTrain,]
dim(training); dim(test)
summary(Wage)
featurePlot(x=training[ , c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, color=jobclass, data=training)
featurePlot(x=training[ , c("age", "education", "jobclass")], y=training[,"wage"], plot="pairs")
featurePlot(x=training[ , c("age", "education", "jobclass")], y=training[,c("wage")], plot="pairs")
featurePlot(x=training[ , c("age", "education", "jobclass")], y=training$wage, plot="scatter")
featurePlot(x=training[ , c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, data=training)
qplot(age, wage, color=jobclass, data=training)
qplot(wage~age, color=jobclass, data=training)
qq <- qplot(age, wage, color=jobclass, data=training)
qq + geom_smooth(method="lm", formula=y~x)
qq <- qplot(age, wage, color=education, data=training)
qq + geom_smooth(method="lm", formula=y~x)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
cutWage
table(cutWage)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p1
qplot(cutWage, age, data=training, geom=c("boxplot"))
qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
200*800
200*800*1.177
20*800*1.177
16*800*1.177
200/0.03
3/90
80/2400
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p2 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot", "jitter"))
grid.arrange(p1, p2, ncol=2)
library(ggplot2)
grid.arrange(p1, p2, ncol=2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
class(cutW)
class(cutWage)
cutWage
t1 <- table(cutWage, training$jobclass)
t1
prop.table(t1, 1)
prop.table(t1)
t1
35/60
21/25
49/60
60*0.833
60*0.84
248/15096
60*-.833
60*0.833
25*0.833
25*0.833
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve)) / sd(trainCapAve)
training[,-58]
class(training[,-58])
View(training)
training[,-58]
head(training[,-58])
View(head(training[,-58]))
set.seed(13343)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1], size=1, prob=0.05)==1
selectNA
-selectNA
!selectNA
selectNA
dnorm()
?dnorm
dnorm(1)
dnorm(0)
pnorm(-0.5)
pnorm(-0.3)
dnorm(0)
2*pi
1/((2*pi)^0.5)
dnorm(0)
dnorm(1)
curve(dnorm)
curve(dnorm,0 ,1)
curve(dnorm(x,0,1),0 ,1)
curve(dnorm)
curve(dnorm, -1,1)
curve(1/dnorm, -1,1)
curve((1/dnorm), -1,1)
curve(dnorm, 1,-1)
rexp(n, lambda)
set.seed(123)
# Setting the variable values.
n <- 40  # Number of exponentials per random sample.
nosim <- 1000  # Number of simulations.
lambda <- 0.2  # As instructed. This is the rate parameter.
rexp(n, lambda)
1/lambda
curve(dnorm(),-1,1)
curve(dnorm,-1,1)
curve(dnorm,-1,1, ylab = "Density")
curve(expr=dnorm, from=-1, to=1, ylab="Density")
dnorm(0)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
summary(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve)) / sd(trainCapAve)
mean(trainCapAve)
sd(trainCapAve)
mean(trainCapAve)
trainCapAveS <- (trainCapAve - mean(trainCapAve)) / sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
#### train
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve)) / sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
summary(training$capitalAve)
hist(training$CapAveS)
hist(trainCapAveS)
summary(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve - mean(testCapAve)) / sd(testCapAve)
mean(testCapAveS)
sd(testCapAveS)
data(iris); library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=F)
train <- iris[inTrain,]
test <- iris[-inTrain,]
modFit <- train(Species~., data=train, method="rf", prox=T)
modFit
getTree(modFit$finalModel, k=2)
?train
modFit
modFit$finalModel
getTree(modFit$finalModel)
getTree(modFit$finalModel, k=25)
getTree(modFit$finalModel, k=26)
getTree(modFit$finalModel, k=29)
modFit
modFit$finalModel
getTree(modFit$finalModel, k=501)
modFit
modFit$finalModel
View(iris)
modFit$finalModel$prox
modFit$finalModel$mtry
modFit$finalModel$prox
head(modFit$finalModel$prox)
train[,c(3,4)]
irisP <- classCenter(train[,c(3,4)], train$Species, modFit$finalModel$prox)
irisP
data(iris); library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=F)
train <- iris[inTrain,]
test <- iris[-inTrain,]
modFit <- train(Species~., data=train, method="rf", prox=F)
irisP <- classCenter(train[,c(3,4)], train$Species, modFit$finalModel$prox)
irisP <- classCenter(train[,c(3,4)], train$Species)
modFit <- train(Species~., data=train, method="rf", prox=T)
irisP <- classCenter(train[,c(3,4)], train$Species, modFit$finalModel$prox)
irisP
irisP <- classCenter(train[,c(3,4)], train$Species, modFit$finalModel$proximity)
irisP
irisP <- as.data.frame(irisP)
irisP <- classCenter(train[,c(3,4)], train$Species, modFit$finalModel$prox)
class(irisP)
irisP <- as.data.frame(irisP)
class(irisP)
irisP
irisP$Species <- rownames(irisP)
irisP
p <- qplot(Petal.Width, Petal.Length, col=Species, data=train)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=5, shape=4, data=irisP)  # Adding the cluster centers.
pred <- predict(modFit, test)
test$predRight <- pred == test$Species  # New Boolean column predRight. For seeing if predicted values match the actual values.
table(pred, test$Species)
qplot(Petal.Width, Petal.Length, color=predRight, data=test, main="New Data Predictions")
dim(pred)
pref
pred
dim(pref)
dim(pred)
test$Species
table(pred, test$Species)
?rfcv
### Boosting
library(ISLR); data(Wage); library(caret)
Wage <- subset(Wage, select=-c(logwage))
View(Wage)
logwage
c(logwage)
data(Wage)
c(logwage)
View(Wage)
log(75)
library(ISLR); data(Wage); library(caret)
Wage <- subset(Wage, select=-c(logwage))  # Remove the logwage variable.
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=F)
train <- Wage[inTrain,]; test <- Wage[-inTrain,]
modFit <- train(wage~., method="gbm", data=train, verbose=T)
modFit
qplot(predict(modFit, test), wage, data=test)
predict(modFit, test)
View(test)
wage
test$wage
View(test$wage)
View(predict(modFit, test))
modFit$finalModel
library(ElemStatLearn); library(caret)
data(SAheart)
set.seed(8484)
idx_train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train = SAheart[idx_train,]
test = SAheart[-idx_train,]
View(SAheart)
set.seed(13234)
modFit <- train(chd ~ age+alcohol + obesity + tobacco + typea + ldl, data=train, method="glm", family="binomial")
modFit
View(test)
View(test)
prediction <- predict(modFit, newdata=test)
values <- test[,"chd"]
prediction
attribute(prediction)
attributes(prediction)
misClass(values, prediction)
misClass = function(values, prediction){
sum(( (prediction > 0.5)*1) != values) / length(values)
}
misClass(values, prediction)
summary(test$chd)
unique(test$chd)
length(values)
misClass(train$chd, train$chd)
misClass(train$chd, predict(modFit, newdata=train))
misClass = function(values, prediction){
sum( ((prediction > 0.5)*1) != values) / length(values))
}
misClass(values, prediction)
misClass <- function(values, prediction) {
(sum(((prediction > 0.5)*1) != values)) / length(values)
}
misClass(values, prediction)
misClass(train$chd, predict(modFit, newdata=train))  # Mis-classification rate for train data.
modFit$finalModel
misClass(values_test, prediction_test)  # Mis-classification rate for test data.
misClass(train$chd, predict(modFit, newdata=train))  # Mis-classification rate for train data.
data(SAheart)
set.seed(8484)
idx_train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train = SAheart[idx_train,]
test = SAheart[-idx_train,]
set.seed(13234)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=train, method="glm", family="binomial")
prediction_test <- predict(modFit, newdata=test)
values_test <- test[,"chd"]
### Utility function. Gives the mis-classification rate. Cut-off is prediction > 0.5.
misClass <- function(values, prediction) {
(sum(((prediction > 0.5)*1) != values)) / length(values)
}
misClass(values_test, prediction_test)  # Mis-classification rate for test data.
misClass(train$chd, predict(modFit, newdata=train))  # Mis-classification rate for train data.
modFit$finalModel
modFit
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
train <- vowel.train
test <- vowel.test
View(test)
View(train)
summary(train$y)
class(train$y)
train$y <- as.factor(train$y)
test$y <- as.factor(test$y)
summary(train$y)
View(train)
modFit <- train(y~., data=train, method="rf")
modFit
varImp(modFit)
varImp(modFit, scale = F)
?varImp
varImp(modFit, scale = T)
library(ElemStatLearn)
set.seed(33833)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test <- vowel.test
### Set y to factor
train$y <- as.factor(train$y)
test$y <- as.factor(test$y)
### Train the rf model.
modFit <- train(y~., data=train, method="rf")
varImp(modFit, scale = T)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test <- vowel.test
set.seed(33833)
train$y <- as.factor(train$y)
test$y <- as.factor(test$y)
### Train the rf model.
modFit_rf <- train(y~., data=train, method="rf")
modFit_gbm <- train(y~., data=train, method="gbm")
prediction_rf <- predict(modFit_rf, test)
prediction_gbm <- predict(modFit_gbm, test)
prediction_rf
View(test)
prediction_gbm
prediction_rf == test$y
sum(prediction_rf == test$y)
sum(prediction_rf == test$y) / length(test$y)
length(test$y)
sum(prediction_rf == test$y) / length(test$y)
sum(prediction_gbm == test$y) / length(test$y)
test
test -> tmp
tmp
84000/12
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
View(GOOG)
mGoog <- to.monthly(GOOG)
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
to.dat
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
View(GOOG)
tail(GOOG)
mGoog <- to.monthly(GOOG)
summary(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
?to.monthly
class(GOOG)
str(to.monthly)
attributes(GOOG)
index(GOOG)
?index
start(GOOG)
end(GOOG)
time(GOOG)
date(GOOG)
index(GOOG)
mGoog <- to.monthly(GOOG)
traceback()
debug()
debug(to.monthly(GOOG))
debugonce(to.monthly)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG, droptime=F)
debugonce(to.monthly)
mGoog <- to.monthly(GOOG, droptime=F)
mGoog <- to.monthly(GOOG, drop.time=F)
googOpen <- Op(mGoog)
View(googOpen)
View(googOpen)
View(mGoog)
summary(mGoog)
View(GOOG)
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
?getSymbols
showSymbols
showSymbols()
showSymbols(GOOG)
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
View(GOOG)
from.dat <- as.Date("01/01/09", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
View(GOOG)
mGoog <- to.monthly(GOOG, drop.time=F)
View(mGoog)
getSymbols("GOOG", src="yahoo", from=from.dat, to=to.dat)
mGoog <- to.monthly(GOOG, drop.time=F)  # debugonce(<funcname>)
debugonce(to.monthly)
mGoog <- to.monthly(GOOG, drop.time=F)
NROW(x)
is.na(x)
x
dim(x)
View(GOOG)
GOOG$GOOG.Volume <- 1
View(GOOG)
mGoog <- to.monthly(GOOG, drop.time=F)
View(mGoog)
googOpen <- Op(mGoog)
View(googOpen)
ts1 <- ts(googOpen, frequency = 12)
ts1
plot(ts1, xlab="Years+1", ylab="GOOG")
plot(ts1, xlab="Years+1", ylab="GOOG")
plot(ts1, xlab="Years+1", ylab="GOOG")
plot(ts1, xlab="Years+1", ylab="GOOG")
mGoog <- to.monthly(GOOG, drop.time=F)
plot(ts1, xlab="Years+1", ylab="GOOG")
decompose(ts1)
plot(decompose(ts1)), xlab="Years+1")
plot(decompose(ts1), xlab="Years+1")
class(ts1)
View(mGoog)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
GOOG$GOOG.Volume <- 1
mGoog <- to.monthly(GOOG, drop.time=F)  # debugonce(<funcname>), traceback()
googOpen <- Op(mGoog)  # Get only the opening prices.
ts1 <- ts(googOpen, frequency = 12)  # Convert to a ts object.
plot(ts1, xlab="Years+1", ylab="GOOG")  # Drawing the chart.
plot(decompose(ts1), xlab="Years+1")  # Decomposing a time series into parts.
plot(ts1, xlab="Years+1", ylab="GOOG")  # Drawing the chart.
plot(ts1, xlab="Years+1", ylab="GOOG")  # Drawing the chart.
plot(decompose(ts1), xlab="Years+1")  # Decomposing a time series into parts.
View(mGoog)
View(mGoog)
View(GOOG)
View(googOpen)
View(mGoog)
ts1train <- window(ts1, start=1, end=5)
ts1train <- window(ts1, start=1, end=5)
ts1test <- windows(ts1, start=5, end=(7-0.01))
ts1train
plot(ts1train)
lines(ma(ts1train, order=3), col="red")
plot(ts1train)
View(ts1train)
head(ts1train)
head(googOpen)
?window
ls
ls()
library(quantmod)
ma
View(ts1)
ts1 ==ts1train
attributes(ts1)
colnames(ts1)
summary(ts1)
ts1
library(forecast)
lines(ma(ts1train, order=3), col="red")
lines(ma(ts1train, order=10), col="blue")
ets1 <- ets(ts1train, model="MMM")
ets1
fcast <- forecast(ets)
plot(fcast); lines(ts1test, col="red")
accuracy(fcast, ts1test)
fcast <- forecast(ets)
fcast <- forecast(ets1)
plot(fcast); lines(ts1test, col="red")
lines(ts1test, col="red")
ts1test
ts1test <- windows(ts1, start=5, end=(7-0.01))
end=(7-0.01)
ts1test <- windows(ts1, start=5, end=(7-0.01))
ts1test <- window(ts1, start=5, end=(7-0.01))
ts1test
ts1train
plot(fcast); lines(ts1test, col="red")
accuracy(fcast, ts1test)
download.packages("fpp")
install.packages("fpp")
library(quantmod)
getQuote("GS", what = yahooQF(c("Market Capitalization", "Earnings/Share",
"P/E Ratio", "Book Value", "EBITDA", "52-week Range")))
getQuote("GS", what=yahooQF())
library(fpp)
data(melsyd)
View(mel)syd
View(melsyd)
class(GOOD)
class(GOOG)
naive(GOOG)
naive(GOOG, 2)
setwd("C:/Dropbox/Selegie/Coursera - Data Science Specialization/09 Developing Data Products/Project")
